import numpy as np
import matplotlib.pyplot as plt

# Parameters
dt = 0.1            # Time step (ms)
T = 100             # Total simulation time (ms)
time = np.arange(0, T, dt)
V_rest = -65        # Resting membrane potential (mV)
V_reset = -70       # Reset potential after spike (mV)
V_threshold = -50   # Firing threshold (mV)
R = 10              # Membrane resistance (MÎ©)
tau_m = 10          # Membrane time constant (ms)
I_ext = 1.5         # External input current (nA)

# Variables
V = V_rest * np.ones_like(time)  # Membrane potential (initialized to V_rest)
spikes = np.zeros_like(time)    # Spike train (0 = no spike, 1 = spike)

# Simulation loop
for t in range(1, len(time)):
    # Compute membrane potential using Euler's method
    dV = (-(V[t-1] - V_rest) + R * I_ext) / tau_m * dt
    V[t] = V[t-1] + dV
    
    # Check for threshold crossing
    if V[t] >= V_threshold:
        V[t] = V_reset      # Reset potential after spike
        spikes[t] = 1       # Record spike

# Plot results
plt.figure(figsize=(10, 6))
plt.subplot(2, 1, 1)
plt.plot(time, V, label="Membrane Potential (V)")
plt.axhline(V_threshold, color='r', linestyle='--', label="Threshold")
plt.axhline(V_rest, color='gray', linestyle='--', label="Resting Potential")
plt.xlabel("Time (ms)")
plt.ylabel("Membrane Potential (mV)")
plt.legend()
plt.title("Integrate-and-Fire Neuron Simulation")

plt.subplot(2, 1, 2)
plt.plot(time, spikes, drawstyle='steps-post', label="Spikes")
plt.xlabel("Time (ms)")
plt.ylabel("Spikes")
plt.ylim(-0.1, 1.1)
plt.legend()
plt.tight_layout()
plt.show()
